
I2C_Test_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000321  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ad  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003de  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  00000da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	57 d0       	rcall	.+174    	; 0xf0 <main>
  42:	6f c0       	rjmp	.+222    	; 0x122 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
  46:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  4a:	84 e5       	ldi	r24, 0x54	; 84
  4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
  50:	08 95       	ret

00000052 <i2c_start>:
  52:	94 ea       	ldi	r25, 0xA4	; 164
  54:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  58:	ec eb       	ldi	r30, 0xBC	; 188
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	90 81       	ld	r25, Z
  5e:	99 23       	and	r25, r25
  60:	ec f7       	brge	.-6      	; 0x5c <i2c_start+0xa>
  62:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  66:	98 7f       	andi	r25, 0xF8	; 248
  68:	98 30       	cpi	r25, 0x08	; 8
  6a:	11 f0       	breq	.+4      	; 0x70 <i2c_start+0x1e>
  6c:	90 31       	cpi	r25, 0x10	; 16
  6e:	a1 f4       	brne	.+40     	; 0x98 <i2c_start+0x46>
  70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
  74:	84 e8       	ldi	r24, 0x84	; 132
  76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	88 23       	and	r24, r24
  82:	ec f7       	brge	.-6      	; 0x7e <i2c_start+0x2c>
  84:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  88:	98 7f       	andi	r25, 0xF8	; 248
  8a:	98 31       	cpi	r25, 0x18	; 24
  8c:	39 f0       	breq	.+14     	; 0x9c <i2c_start+0x4a>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 34       	cpi	r25, 0x40	; 64
  92:	29 f4       	brne	.+10     	; 0x9e <i2c_start+0x4c>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	08 95       	ret
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	08 95       	ret

000000a0 <i2c_rep_start>:
  a0:	d8 df       	rcall	.-80     	; 0x52 <i2c_start>
  a2:	08 95       	ret

000000a4 <i2c_stop>:
  a4:	84 e9       	ldi	r24, 0x94	; 148
  a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 fd       	sbrc	r24, 4
  b2:	fd cf       	rjmp	.-6      	; 0xae <i2c_stop+0xa>
  b4:	08 95       	ret

000000b6 <i2c_write>:
  b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  c0:	ec eb       	ldi	r30, 0xBC	; 188
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 23       	and	r24, r24
  c8:	ec f7       	brge	.-6      	; 0xc4 <i2c_write+0xe>
  ca:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  ce:	98 7f       	andi	r25, 0xF8	; 248
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	98 32       	cpi	r25, 0x28	; 40
  d4:	09 f4       	brne	.+2      	; 0xd8 <i2c_write+0x22>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	while(!(TWCR & (1<<TWINT)));
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <i2c_readNak+0xa>
	
    return TWDR;
  ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>

}/* i2c_readNak */
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{
    unsigned char ret;
    

    DDRC  = 0x0C;                              // LEDs Rojos 
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	87 b9       	out	0x07, r24	; 7
    PORTC = 0x0C;                              // (active low LED's )
  f4:	88 b9       	out	0x08, r24	; 8

    DDRD  = 0x90;                              // LEDs Verdes 
  f6:	80 e9       	ldi	r24, 0x90	; 144
  f8:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x90;                              // (active low LED's )
  fa:	8b b9       	out	0x0b, r24	; 11
LDI R20, 0b10010000         ; Con un 1 quedan apagados por la logica de la placa Club de Robotica
OUT PORTD, R20  
*/


    i2c_init();                                // init I2C interface
  fc:	a4 df       	rcall	.-184    	; 0x46 <i2c_init>
    LDI R20, 0b00000000
    OUT PORTC, R20  
CONTINUE:               
*/

    ret = i2c_start(DevADXL345+I2C_WRITE);       // set device address and write mode
  fe:	86 ea       	ldi	r24, 0xA6	; 166
 100:	a8 df       	rcall	.-176    	; 0x52 <i2c_start>
    if ( ret ) {
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <main+0x1c>
        /* failed to issue start condition, possibly no device found */
        i2c_stop();
 106:	ce df       	rcall	.-100    	; 0xa4 <i2c_stop>
        PORTD = 0x00;                            // Prende LEDs Verdes en caso de ERROR
 108:	1b b8       	out	0x0b, r1	; 11
 10a:	0a c0       	rjmp	.+20     	; 0x120 <main+0x30>
    }else {
        /* issuing start condition ok, device accessible */
        i2c_write(0x00);                       // Direccion del registro a leer DEVID
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	d3 df       	rcall	.-90     	; 0xb6 <i2c_write>
        i2c_rep_start(DevADXL345+I2C_READ);       // set device address and read mode
 110:	87 ea       	ldi	r24, 0xA7	; 167
 112:	c6 df       	rcall	.-116    	; 0xa0 <i2c_rep_start>
        ret = i2c_readNak();                    // read one byte
 114:	e2 df       	rcall	.-60     	; 0xda <i2c_readNak>
 116:	c8 2f       	mov	r28, r24
        i2c_stop();
 118:	c5 df       	rcall	.-118    	; 0xa4 <i2c_stop>
        
        if(ret == 0xE5)
 11a:	c5 3e       	cpi	r28, 0xE5	; 229
 11c:	09 f4       	brne	.+2      	; 0x120 <main+0x30>
            PORTC = 0x00;                      // Prende LEDs Rojos en caso de Lectura correcta
 11e:	18 b8       	out	0x08, r1	; 8
    }
    
    for(;;);	
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x30>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
