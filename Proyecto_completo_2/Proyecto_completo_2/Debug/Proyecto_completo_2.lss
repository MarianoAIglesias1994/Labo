
AVRASM ver. 2.2.6  C:\Users\MarianoAgustín\Documents\GitHub\Labo\Proyecto_completo_2\Proyecto_completo_2\main.asm Fri Nov 25 21:12:00 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
C:\Users\MarianoAgustín\Documents\GitHub\Labo\Proyecto_completo_2\Proyecto_completo_2\main.asm(11): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328Pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
C:\Users\MarianoAgustín\Documents\GitHub\Labo\Proyecto_completo_2\Proyecto_completo_2\main.asm(11): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328Pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Proyecto_completo_2.asm
                                 ;
                                 ; Created: 25/11/2016 08:18:55 p.m.
                                 ; Author : MarianoAgustÃ­n
                                 ;
                                 /**************************************************************
                                 DIRECTIVAS
                                 ***************************************************************/
                                 #define F_CPU 16000000UL 
                                 .include "m328Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .def AUX1 = R21
                                 .def TEMP = R17
                                 .def UART_DATA = R18
                                 .def SWITCH = R19
                                 .def SLA_W = R20
                                 .def SLA_R = R16
                                 .def REG_DIR = R22
                                 .def DATA_OUT = R23
                                 .def DATA_IN = R24
                                 .def AUX_I2C = R25
                                 
                                 .def SEGUNDOS = R2
                                 .def MINUTOS = R3
                                 .def HORA = R4
                                 .def DIA_SEMANA = R5
                                 .def DIA_MES = R6
                                 .def MES = R7
                                 .def ANIO = R8
                                 
                                 .equ CASE_NULL = 0
                                 .equ CASE_INACT = 1
                                 .equ CASE_BT = 2
                                 
                                 .equ ORG_MAIN = 0x00
                                 .equ ORG_ISR_INT0_INACTIVITY = 0x02
                                 .equ ORG_ISR_INT1_BLUETOOTH = 0x04
                                 
                                 .equ NULL = 0b00000000
                                 .equ BT_ENABLE = 0b00000001 
                                 .equ INACT_BT_LEDS = 0b00110000	
                                 .equ TODO_CAMBIO_LOGICO_INT0_INT1 = 0b00000101 
                                 .equ INT0_INT1_ENABLE = 0b00000011
                                 .equ POWER_DOWN_MODE_SLEEP_OFF = 0b00000100 ; Nibble inferior D3D2D1 = 010 es de power down mode y el lsb D0 = 1 es para activar el sleep mode
                                 .equ POWER_DOWN_MODE_SLEEP_ON = 0b00000101
                                 .equ BT_LED_TIME = 10; Duracion LED titilando
                                 .equ INACT_LED_BUZZER_TIME = 200; Duracion LED y buzzer titilando
                                 .equ BT_LED = 0b00010000
                                 .equ INACT_LED = 0b00100000
                                 
                                 .equ ACELEROMETRO_SLA_W = 0xA6; Direccion del esclavo SLA(1010011) + Write(0)
                                 .equ ACELEROMETRO_SLA_R = 0xA7; Direccion del esclavo SLA(1010011) + Read(1)
                                 .equ THRESH_INACT = 0x25; Umbral de inactividad
                                 .equ THRESH_INACT_VAL = 0b00000001; 8 bit unsigned. No dejar en 0x00 umbral de inactividad (62.5 mg/LSB)
                                 .equ TIME_INACT = 0x26; Umbral de tiempo de inactividad
                                 .equ TIME_INACT_VAL = 0b00000010; (maximo 255 segundos) (1 sec/LSB)
                                 .equ ACT_INACT_CTL = 0x27; Controla los ejes que intervienen
                                 .equ ACT_INACT_CTL_VAL = 0b00001111; (D3 en 1=ac coupled)(D2D1D0 = 111 enable en los tres ejes)
                                 .equ BW_RATE = 0x2C; Data rate and power mode control
                                 .equ BW_RATE_VAL = 0b00000110 ;(D4=0 sin Low Power)(Rate D3D2D1D0 = 0110 : BW=3.13Hz) 
                                 .equ INT_MAP = 0x2F; Interrupt mapping control
                                 .equ INT_MAP_VAL = 0b11110111; Solo la inactividad conectada al pin INT1, el resto conectadas al pin INT2
                                 .equ INT_ENABLE = 0x2E; Interrupt enable control
                                 .equ INT_ENABLE_VAL = 0b00001000; Se habilita solo la interrupcion por inactividad
                                 .equ POWER_CTL = 0x2D; 
                                 .equ POWER_CTL_VAL = 0b00001000	; MEASURE ON, por defecto se prende en modo standby
                                 .equ INT_SOURCE = 0x30; -Muestra la causa de interrupcion, read only
                                 
                                 .equ RTC_SLA_W = 0b11010000; Direccion del esclavo + Write(0)
                                 .equ RTC_SLA_R = 0b11010001; Direccion del esclavo + Read(1)
                                 .equ RTC_CTRL_REG = 0x0E; CONFIGURACION REGISTRO DE CONTROL
                                 .equ RTC_CTRL_REG_VAL = 0x00
                                 .equ RTC_SEGUNDOS_REG = 0b00000000; CONFIGURACION SEGUNDOS
                                 .equ RTC_SEGUNDOS_REG_VAL = 0b00000000
                                 .equ RTC_MINUTOS_REG = 0b00000001; CONFIGURACION MINUTOS
                                 .equ RTC_MINUTOS_REG_VAL = 0b00000000
                                 .equ RTC_HORA_REG = 0b00000010; CONFIGURACION HORA
                                 .equ RTC_HORA_REG_VAL = 0b00011001
                                 .equ RTC_DIA_SEMANA_REG = 0b00000011; CONFIGURACION DIA DE LA SEMANA
                                 .equ RTC_DIA_SEMANA_REG_VAL = 0b00000101 ;dia 5 de la semana, viernes
                                 .equ RTC_DIA_MES_REG = 0b00000100; CONFIGURACION DIA DEL MES
                                 .equ RTC_DIA_MES_REG_VAL = 0b00011000
                                 .equ RTC_MES_REG = 0b00000101; CONFIGURACION MES
                                 .equ RTC_MES_REG_VAL = 0b00010001
                                 .equ RTC_ANIO_REG = 0b00000110; CONFIGURACION AÃO
                                 .equ RTC_ANIO_REG_VAL = 0b00010110
                                 
                                 
                                 .equ UBRR0L_VALUE = 0x67
                                 .equ UBRR0H_VALUE = 0x00
                                 
                                 
                                 /**************************************************************
                                 VECTORES DE INTERRUPCION
                                 ***************************************************************/
                                 
                                 .cseg
                                 .org ORG_MAIN
000000 c004                      rjmp main
                                 .org ORG_ISR_INT0_INACTIVITY				
000002 c096                      rjmp ISR_INT0_INACTIVITY	
                                 .org ORG_ISR_INT1_BLUETOOTH				
000004 c098                      rjmp ISR_INT1_BLUETOOTH	
                                 
                                 
                                 /**************************************************************
                                 MAIN
                                 ***************************************************************/
                                 
                                 main:
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION STACK
                                 ***************************************************************/
                                 
000005 e018                      	LDI TEMP, HIGH(RAMEND)	; Configura el STACK
000006 bf1e                      	OUT SPH, TEMP
000007 ef1f                      	LDI TEMP, LOW(RAMEND)
000008 bf1d                      	OUT SPL, TEMP
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION PUERTOS
                                 ***************************************************************/
                                 
000009 e011                      	LDI TEMP, BT_ENABLE		; Habilita Vcc a BT
00000a b917                      	OUT DDRC, TEMP			
00000b e011                      	LDI TEMP, BT_ENABLE		
00000c b918                      	OUT PORTC, TEMP	
                                 
00000d e310                      	LDI TEMP, INACT_BT_LEDS	; LEDs conectados a los bits seteados en dichos puertos
00000e b91a                      	OUT DDRD, TEMP
00000f e010                      	LDI TEMP, NULL		; LEDs apagados
000010 b91b                      	OUT PORTD, TEMP	
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION INTERRUPCIONES EXTERNAS
                                 ***************************************************************/
                                 
                                 CONFIG_INT:
                                 
                                 	;EICRA: Configura por flanco o por nivel
000011 e015                      	ldi TEMP, TODO_CAMBIO_LOGICO_INT0_INT1; Cualquier cambio logico en INT0 e INT1 
000012 9310 0069                 	sts EICRA, TEMP		;
                                 
                                 	;EIMSK: Habilita las interrupciones seleccionadas
000014 e013                      	ldi TEMP, INT0_INT1_ENABLE; Habilita INT0 e INT1 
000015 bb1d                      	out EIMSK, TEMP		;
                                 
                                 	;EIFR: Tiene que estar seteado junto con el bit de interrupcion global al momento de suceder la interrupcion 
000016 e013                      	ldi TEMP, INT0_INT1_ENABLE	; Para INT0 e INT1 
000017 bb1c                      	out EIFR, TEMP		;
                                 
000018 9478                      	SEI
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION BAJO CONSUMO
                                 ***************************************************************/
                                 
                                 CONFIG_BAJO_CONSUMO:
                                 	; Config consumo de energia, PSM o PDM
000019 e014                      	ldi TEMP, POWER_DOWN_MODE_SLEEP_OFF
00001a bf13                      	out SMCR, TEMP
                                 
                                 	
                                 /**************************************************************
                                 INCIALIZACION I2C
                                 ***************************************************************/
                                 
00001b d0bd                      RCALL I2C_INIT
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION ACELEROMETRO
                                 ***************************************************************/
                                 
00001c d084                      RCALL CONFIG_ACELEROMETRO
00001d d09b                      RCALL CLEAN_INACT
                                 	
                                 
                                 /**************************************************************
                                 CONFIGURACION RTC
                                 ***************************************************************/
                                 
00001e d09f                      RCALL CONFIG_RTC
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION BLUETOOTH
                                 ***************************************************************/
00001f d10d                      RCALL RETARDO_BT
000020 d0f8                      RCALL USART_INIT
000021 d10b                      RCALL RETARDO_BT
                                 
                                 
                                 /**************************************************************
                                 BLOQUE PRINCIPAL
                                 ***************************************************************/
                                 
                                 SLEEP_MODE:
000022 e015                      			ldi TEMP, POWER_DOWN_MODE_SLEEP_ON	; Activa el sleep mode
000023 bf13                      			out SMCR, TEMP
000024 9588                      			SLEEP ; Entra en modo sleep, al suceder una interrupcion se despierta en la instruccion siguiente
000025 e014                      			ldi TEMP, POWER_DOWN_MODE_SLEEP_OFF	; Desactiva el sleep mode
000026 bf13                      			out SMCR, TEMP
                                 			
                                 ; En las rutinas de interrupcion se usa SWITCH para almacenar un registro indicador del tipo de interrupcion ocurrida
                                 ; Es una analogia del switch/case del lenguaje C
                                 
000027 3031                      			CPI SWITCH, CASE_INACT
000028 f1d1                      			BREQ ALARMA
                                 RETORNO_ALARMA:
000029 3032                      			CPI SWITCH, CASE_BT
00002a f009                      			BREQ BLUETOOTH
                                 RETORNO_BLUETOOTH:
00002b cff6                      			RJMP SLEEP_MODE
                                 
                                 
                                 /**************************************************************
                                 RUTINA ENVIO DE ENVIO DE DATOS POR BLUETOOTH 
                                 ***************************************************************/
                                 
                                 BLUETOOTH:
00002c e05a                      LDI AUX1, BT_LED_TIME
                                 
                                 PARPADEO2:
00002d e110                      		LDI TEMP, BT_LED; Prende LED
00002e b91b                      		OUT PORTD, TEMP	
00002f d01f                      		RCALL RETARDO2
000030 e010                      		LDI TEMP, NULL	; Apaga LED
000031 b91b                      		OUT PORTD, TEMP	
000032 d01c                      		RCALL RETARDO2
                                 
000033 955a                      		DEC AUX1
000034 3050                      		CPI AUX1, NULL
000035 f7b9                      		BRNE PARPADEO2
                                 
                                 ; Envia los datos
000036 2d22                      		MOV UART_DATA, SEGUNDOS;
000037 d0ee                      		RCALL USART_TRANSMISION	;
000038 d0f4                      		RCALL RETARDO_BT
                                 
000039 2d23                      		MOV UART_DATA, MINUTOS;
00003a d0eb                      		RCALL USART_TRANSMISION	;
00003b d0f1                      		RCALL RETARDO_BT
                                 
00003c 2d24                      		MOV UART_DATA, HORA;
00003d d0e8                      		RCALL USART_TRANSMISION	;
00003e d0ee                      		RCALL RETARDO_BT
                                 
00003f 2d25                      		MOV UART_DATA, DIA_SEMANA;
000040 d0e5                      		RCALL USART_TRANSMISION	;
000041 d0eb                      		RCALL RETARDO_BT
                                 
000042 2d26                      		MOV UART_DATA, DIA_MES;
000043 d0e2                      		RCALL USART_TRANSMISION	;
000044 d0e8                      		RCALL RETARDO_BT
                                 
000045 2d27                      		MOV UART_DATA, MES;
000046 d0df                      		RCALL USART_TRANSMISION	;
000047 d0e5                      		RCALL RETARDO_BT
                                 
000048 2d28                      		MOV UART_DATA, ANIO;
000049 d0dc                      		RCALL USART_TRANSMISION	;
00004a d0e2                      		RCALL RETARDO_BT
                                 
                                 		
00004b d06d                      		RCALL CLEAN_INACT
00004c d054                      		RCALL CONFIG_ACELEROMETRO
                                 
00004d e030                      		LDI SWITCH, CASE_NULL		; Se limpia el registro indicador
00004e cfdc                      		RJMP RETORNO_BLUETOOTH
                                 
                                 
                                 RETARDO2:
00004f e00a                      		LDI R16, 10
000050 ef1f                      LOOP12:	LDI R17, 255
000051 ef2f                      LOOP22:	LDI R18, 255
000052 952a                      LOOP32:  DEC R18
000053 f7f1                      		BRNE LOOP32			
000054 951a                      		DEC R17
000055 f7d9                      		BRNE LOOP22
000056 950a                      		DEC R16
000057 f7c1                      		BRNE LOOP12
000058 9508                      		RET
                                 
                                 RETARDO3:
000059 e005                      		LDI R16, 5
00005a ef1f                      LOOP13:	LDI R17, 255
00005b ef2f                      LOOP23:	LDI R18, 255
00005c 952a                      LOOP33: DEC R18
00005d f7f1                      		BRNE LOOP33		
00005e 951a                      		DEC R17
00005f f7d9                      		BRNE LOOP23
000060 950a                      		DEC R16
000061 f7c1                      		BRNE LOOP13
000062 9508                      		RET
                                 
                                 /**************************************************************
                                 RUTINA DE ALARMA
                                 ***************************************************************/
                                 
                                 ALARMA:	
000063 ec58                      		LDI AUX1, INACT_LED_BUZZER_TIME
                                 
000064 d02a                      		RCALL PARPADEO
000065 dff3                      		RCALL RETARDO3
000066 d028                      		RCALL PARPADEO
000067 dff1                      		RCALL RETARDO3
000068 d026                      		RCALL PARPADEO
000069 dfef                      		RCALL RETARDO3
                                 
00006a ed40                      		LDI SLA_W, RTC_SLA_W
00006b ed01                      		LDI SLA_R, RTC_SLA_R
                                 	
00006c e060                      		LDI REG_DIR, RTC_SEGUNDOS_REG
00006d d09e                      		RCALL SINGLE_BYTE_READ
00006e 2e28                      		MOV SEGUNDOS,DATA_IN	
                                 
00006f e061                      		LDI REG_DIR, RTC_MINUTOS_REG
000070 d09b                      		RCALL SINGLE_BYTE_READ
000071 2e38                      		MOV MINUTOS,DATA_IN		
                                 
000072 e062                      		LDI REG_DIR, RTC_HORA_REG
000073 d098                      		RCALL SINGLE_BYTE_READ
000074 2e48                      		MOV HORA,DATA_IN	
                                 		
000075 e063                      		LDI REG_DIR, RTC_DIA_SEMANA_REG
000076 d095                      		RCALL SINGLE_BYTE_READ
000077 2e58                      		MOV DIA_SEMANA,DATA_IN
                                 				
000078 e064                      		LDI REG_DIR, RTC_DIA_MES_REG
000079 d092                      		RCALL SINGLE_BYTE_READ
00007a 2e68                      		MOV DIA_MES,DATA_IN	 
                                 		
00007b e065                      		LDI REG_DIR,RTC_MES_REG
00007c d08f                      		RCALL SINGLE_BYTE_READ
00007d 2e78                      		MOV MES,DATA_IN	
                                 		
00007e e066                      		LDI REG_DIR, RTC_ANIO_REG
00007f d08c                      		RCALL SINGLE_BYTE_READ
000080 2e88                      		MOV ANIO,DATA_IN
                                 
                                 
000081 d037                      		RCALL CLEAN_INACT
000082 d01e                      		RCALL CONFIG_ACELEROMETRO
                                 
000083 e030                      		LDI SWITCH, CASE_NULL; Se limpia el registro indicador
000084 cfa4                      		RJMP RETORNO_ALARMA
                                 
                                 
                                 RETARDO:
000085 e001                      		LDI R16, 1
000086 e312                      LOOP1:	LDI R17, 50
000087 e322                      LOOP2:	LDI R18, 50
000088 952a                      LOOP3:  DEC R18
000089 f7f1                      		BRNE LOOP3			
00008a 951a                      		DEC R17
00008b f7d9                      		BRNE LOOP2
00008c 950a                      		DEC R16
00008d f7c1                      		BRNE LOOP1
00008e 9508                      		RET
                                 
                                 PARPADEO:
00008f e210                      	LDI TEMP, INACT_LED	; Prende LED
000090 b91b                      	OUT PORTD, TEMP	
000091 dff3                      	RCALL RETARDO
000092 e010                      	LDI TEMP, NULL	; Apaga LED
000093 b91b                      	OUT PORTD, TEMP	
000094 dff0                      	RCALL RETARDO
                                 	
000095 955a                      	DEC AUX1
000096 3050                      	CPI AUX1, NULL
000097 f7b9                      	BRNE PARPADEO
000098 9508                      	RET
                                 
                                 
                                 /**************************************************************
                                 RUTINA DE SERVICIO DE INTERRUPCION POR INACTIVIDAD DEL ACELEROMETRO
                                 ***************************************************************/
                                 
                                 
                                 ISR_INT0_INACTIVITY:
000099 94f8                      CLI
00009a e031                      LDI SWITCH, CASE_INACT	
00009b 9478                      SEI
00009c 9518                      RETI
                                 
                                 
                                 
                                 /**************************************************************
                                 RUTINA DE SERVICIO DE INTERRUPCION POR ACTIVACION DEL BLUETOOTH
                                 ***************************************************************/
                                 
                                 
                                 ISR_INT1_BLUETOOTH:
00009d 94f8                      CLI
00009e e032                      LDI SWITCH, CASE_BT
00009f 9478                      SEI
0000a0 9518                      RETI
                                 
                                 
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION ACELEROMETRO
                                 ***************************************************************/
                                 
                                 CONFIG_ACELEROMETRO:
                                 
0000a1 ea46                      	LDI SLA_W, ACELEROMETRO_SLA_W		
0000a2 ea07                      	LDI SLA_R, ACELEROMETRO_SLA_R		
                                 
                                 ; Se comienza la secuencia de seteo del acelerometro en los valores necesarios
                                 
0000a3 e265                      	LDI REG_DIR, THRESH_INACT	
0000a4 e071                      	LDI DATA_OUT, THRESH_INACT_VAL	
0000a5 d05d                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000a6 e266                      	LDI REG_DIR, TIME_INACT		
0000a7 e072                      	LDI DATA_OUT, TIME_INACT_VAL
0000a8 d05a                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000a9 e267                      	LDI REG_DIR, ACT_INACT_CTL		
0000aa e07f                      	LDI DATA_OUT, ACT_INACT_CTL_VAL	
0000ab d057                      	RCALL MULTIPLE_BYTE_WRITE
                                 	
0000ac e26c                      	LDI REG_DIR, BW_RATE		
0000ad e076                      	LDI DATA_OUT, BW_RATE_VAL 
0000ae d054                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000af e26f                      	LDI REG_DIR, INT_MAP
0000b0 ef77                      	LDI DATA_OUT, INT_MAP_VAL
0000b1 d051                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000b2 e26e                      	LDI REG_DIR, INT_ENABLE
0000b3 e078                      	LDI DATA_OUT, INT_ENABLE_VAL
0000b4 d04e                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000b5 e26d                      	LDI REG_DIR, POWER_CTL
0000b6 e078                      	LDI DATA_OUT, POWER_CTL_VAL
0000b7 d04b                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000b8 9508                      RET
                                 
                                 
                                 
                                 CLEAN_INACT: ; Limpia el flag de inactivity en el acelerometro
                                 
0000b9 ea46                      	LDI SLA_W, ACELEROMETRO_SLA_W
0000ba ea07                      	LDI SLA_R, ACELEROMETRO_SLA_R
0000bb e360                      	LDI REG_DIR, INT_SOURCE
0000bc d04f                      	RCALL SINGLE_BYTE_READ
0000bd 9508                      RET
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION RTC
                                 ***************************************************************/
                                 
                                 CONFIG_RTC:
                                 
0000be ed40                      	LDI SLA_W, RTC_SLA_W
0000bf ed01                      	LDI SLA_R, RTC_SLA_R
                                 
0000c0 e06e                      	LDI REG_DIR, RTC_CTRL_REG
0000c1 e070                      	LDI DATA_OUT, RTC_CTRL_REG_VAL
0000c2 d040                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000c3 e060                      	LDI REG_DIR, RTC_SEGUNDOS_REG
0000c4 e070                      	LDI DATA_OUT, RTC_SEGUNDOS_REG_VAL			
0000c5 d03d                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000c6 e061                      	LDI REG_DIR, RTC_MINUTOS_REG
0000c7 e070                      	LDI DATA_OUT, RTC_MINUTOS_REG_VAL
0000c8 d03a                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000c9 e062                      	LDI REG_DIR, RTC_HORA_REG
0000ca e179                      	LDI DATA_OUT, RTC_HORA_REG_VAL
0000cb d037                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000cc e063                      	LDI REG_DIR, RTC_DIA_SEMANA_REG
0000cd e075                      	LDI DATA_OUT, RTC_DIA_SEMANA_REG_VAL
0000ce d034                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000cf e064                      	LDI REG_DIR, RTC_DIA_MES_REG
0000d0 e178                      	LDI DATA_OUT, RTC_DIA_MES_REG_VAL
0000d1 d031                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000d2 e065                      	LDI REG_DIR, RTC_MES_REG
0000d3 e171                      	LDI DATA_OUT, RTC_MES_REG_VAL
0000d4 d02e                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000d5 e066                      	LDI REG_DIR, RTC_ANIO_REG
0000d6 e176                      	LDI DATA_OUT, RTC_ANIO_REG_VAL
0000d7 d02b                      	RCALL MULTIPLE_BYTE_WRITE
                                 
0000d8 9508                      RET
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION I2C
                                 ***************************************************************/
                                 
                                 I2C_INIT:
0000d9 e010                      	LDI TEMP, NULL		
0000da 9310 00b9                 	STS TWSR, TEMP		; Preescaler 1 en TWI Status Reg
0000dc eb10                      	LDI TEMP, 0xB0		; 0xB0
0000dd 9310 00b8                 	STS TWBR, TEMP		; Setea la frecuencia a 50.087 kHz (16 MHz XTAL); Ver cuanto da con 16 MHz
0000df e014                      	LDI TEMP, (1<<TWEN)	; 0x04 a TEMP (TWEN: Enable bit)
0000e0 9310 00bc                 	STS TWCR, TEMP		; Habilita el TWI 
0000e2 9508                      	RET
                                 
                                 
                                 I2C_START:
0000e3 ea14                      	LDI TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
0000e4 9310 00bc                 	STS TWCR, TEMP		; Transimitir condicion de START
                                 	
                                 WAIT1:
0000e6 9110 00bc                 	LDS TEMP, TWCR		; Lee el registro
0000e8 ff17                      	SBRS TEMP, TWINT		; Saltea siguiente linea si TWINT es 1 (==operacion finalizada)
0000e9 cffc                      	RJMP WAIT1			; TWINT esta en 0
0000ea 9508                      	RET
                                 
                                 
                                 I2C_WRITE:
0000eb 9390 00bb                 	STS TWDR, AUX_I2C		; Lleva el byte a TWDR
0000ed e814                      	LDI TEMP, (1<<TWINT)|(1<<TWEN) ; Se setean TWINT y TWEN en el TWCR
0000ee 9310 00bc                 	STS TWCR, TEMP		; Configura TWCR para enviar TWDR
                                 
                                 WAIT2:
0000f0 9110 00bc                 	LDS TEMP, TWCR		; Lee el registro de control a TEMP
0000f2 ff17                      	SBRS TEMP, TWINT		; Saltea siguiente linea si TWINT es 1
0000f3 cffc                      	RJMP WAIT2			; TWINT esta en 0
0000f4 9508                      	RET
                                 
                                 
                                 I2C_READ:
0000f5 e814                      	LDI TEMP, (1<<TWINT)|(1<<TWEN)
0000f6 9310 00bc                 	STS TWCR, TEMP
                                 
                                 WAIT3:
0000f8 9110 00bc                 	LDS TEMP, TWCR
0000fa ff17                      	SBRS TEMP, TWINT
0000fb cffc                      	RJMP WAIT3
0000fc 9190 00bb                 	LDS AUX_I2C, TWDR		; Guarda en AUX_I2C el dato leido
0000fe 9508                      	RET
                                 
                                 
                                 I2C_STOP:
0000ff e914                      	LDI TEMP, (1<<TWINT)|(1<<TWSTO)|(1<<TWEN)
000100 9310 00bc                 	STS TWCR, TEMP		; Transmitir condicion de STOP
000102 9508                      	RET
                                 
                                 
                                 ; Subrutina de escritura de registros de perifericos
                                 MULTIPLE_BYTE_WRITE:		
000103 dfdf                      	RCALL I2C_START		; Transmite la condicion de START
000104 2f94                      	MOV AUX_I2C, SLA_W		; Carga la direccion del esclavo + configuracion W
000105 dfe5                      	RCALL I2C_WRITE		; Escribe AUX_I2C al bus I2C
000106 2f96                      	MOV AUX_I2C, REG_DIR	; Direccion del registro a escribir
000107 dfe3                      	RCALL I2C_WRITE		; Escribe AUX_I2C al bus I2C
000108 2f97                      	MOV AUX_I2C, DATA_OUT	; Dato a transmitir 
000109 dfe1                      	RCALL I2C_WRITE		; Escribe AUX_I2C al bus I2C
00010a dff4                      	RCALL I2C_STOP 		; Transmite la condicion de STOP
00010b 9508                      	RET
                                 
                                 
                                 ; Subrutina de lectura de registros de perifericos 
                                 SINGLE_BYTE_READ:
00010c dfd6                      	RCALL I2C_START		; Transmite la condicion de START
00010d 2f94                      	MOV AUX_I2C, SLA_W		; Carga la direccion del esclavo + configuracion W
00010e dfdc                      	RCALL I2C_WRITE		; Escribe AUX_I2C al bus I2C
00010f 2f96                      	MOV AUX_I2C, REG_DIR	; Direccion del registro a leer
000110 dfda                      	RCALL I2C_WRITE		; Escribe AUX_I2C al bus I2C
000111 dfd1                      	RCALL I2C_START		; Retransmite Start
000112 2f90                      	MOV AUX_I2C, SLA_R		; Carga la direccion del esclavo + configuracion R
000113 dfd7                      	RCALL I2C_WRITE
000114 e090                      	LDI AUX_I2C, NULL
000115 dfdf                      	RCALL I2C_READ
000116 2f89                      	MOV DATA_IN, AUX_I2C
000117 dfe7                      	RCALL I2C_STOP
000118 9508                      	RET
                                 
                                 
                                 /**************************************************************
                                 CONFIGURACION BLUETOOTH
                                 ***************************************************************/
                                 
                                 USART_INIT:
                                 	;Baud rate en 9600
000119 e617                      	LDI TEMP, UBRR0L_VALUE
00011a 9310 00c4                 	STS UBRR0L, TEMP
00011c e010                      	LDI TEMP, UBRR0H_VALUE
00011d 9310 00c5                 	STS UBRR0H, TEMP
                                 
00011f e018                      	LDI TEMP, (1<<TXEN0); Habilitacion TX
000120 9310 00c1                 	STS UCSR0B, TEMP
                                 
000122 e01e                      	LDI TEMP, (1<<USBS0)|(3<<UCSZ00); 8 bits por dato, 2 bits de stop
000123 9310 00c2                 	STS UCSR0C, TEMP
000125 9508                      RET
                                 
                                 
                                 USART_TRANSMISION:
000126 9110 00c0                 	LDS	TEMP,UCSR0A		; Chequea que el buffer este listo para la transmision
000128 ff15                      	SBRS	TEMP,UDRE0
000129 cffc                      	RJMP	USART_TRANSMISION
00012a 9320 00c6                 	STS	UDR0, UART_DATA		; EnvÃ­a la informacion que hay en el registro UART_DATA al buffer para ser enviada
00012c 9508                      RET
                                 
                                 RETARDO_BT:
00012d e104                      		LDI R16, 20
00012e ef1f                      LOOP1BT:LDI R17, 255
00012f ef2f                      LOOP2BT:LDI R18, 255
000130 952a                      LOOP3BT:DEC R18
000131 f7f1                      		BRNE LOOP3BT			
000132 951a                      		DEC R17
000133 f7d9                      		BRNE LOOP2BT
000134 950a                      		DEC R16
000135 f7c1                      		BRNE LOOP1BT


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   2 r3 :   2 r4 :   2 
r5 :   2 r6 :   2 r7 :   2 r8 :   2 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  13 r17:  70 r18:  16 r19:   6 r20:   6 
r21:   6 r22:  25 r23:  16 r24:   8 r25:  10 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   0 r31:   0 
Registers used: 17 out of 35 (48.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   2 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  14 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   4 cpse  :   0 dec   :  14 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   0 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  92 lds   :   5 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  21 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  15 pop   :   0 
push  :   0 rcall :  70 ret   :  17 reti  :   2 rjmp  :  10 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   3 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   1 spm   :   0 st    :   0 std   :   0 sts   :  14 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 17 out of 113 (15.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00026e    618      0    618   32768   1.9%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
