
config_i2c_acel_rtc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001be  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000599  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e4  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000177  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	7f d0       	rcall	.+254    	; 0x140 <main>
  42:	17 c1       	rjmp	.+558    	; 0x272 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
  46:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  4a:	84 e5       	ldi	r24, 0x54	; 84
  4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
  50:	08 95       	ret

00000052 <i2c_start>:
  52:	94 ea       	ldi	r25, 0xA4	; 164
  54:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  58:	ec eb       	ldi	r30, 0xBC	; 188
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	90 81       	ld	r25, Z
  5e:	99 23       	and	r25, r25
  60:	ec f7       	brge	.-6      	; 0x5c <i2c_start+0xa>
  62:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  66:	98 7f       	andi	r25, 0xF8	; 248
  68:	98 30       	cpi	r25, 0x08	; 8
  6a:	11 f0       	breq	.+4      	; 0x70 <i2c_start+0x1e>
  6c:	90 31       	cpi	r25, 0x10	; 16
  6e:	a1 f4       	brne	.+40     	; 0x98 <i2c_start+0x46>
  70:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
  74:	84 e8       	ldi	r24, 0x84	; 132
  76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	88 23       	and	r24, r24
  82:	ec f7       	brge	.-6      	; 0x7e <i2c_start+0x2c>
  84:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  88:	98 7f       	andi	r25, 0xF8	; 248
  8a:	98 31       	cpi	r25, 0x18	; 24
  8c:	39 f0       	breq	.+14     	; 0x9c <i2c_start+0x4a>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 34       	cpi	r25, 0x40	; 64
  92:	29 f4       	brne	.+10     	; 0x9e <i2c_start+0x4c>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	08 95       	ret
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	08 95       	ret

000000a0 <i2c_start_wait>:
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	ec eb       	ldi	r30, 0xBC	; 188
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	24 ea       	ldi	r18, 0xA4	; 164
  aa:	a9 eb       	ldi	r26, 0xB9	; 185
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	cb eb       	ldi	r28, 0xBB	; 187
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	34 e8       	ldi	r19, 0x84	; 132
  b4:	44 e9       	ldi	r20, 0x94	; 148
  b6:	20 83       	st	Z, r18
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start_wait+0x18>
  be:	9c 91       	ld	r25, X
  c0:	98 7f       	andi	r25, 0xF8	; 248
  c2:	98 30       	cpi	r25, 0x08	; 8
  c4:	11 f0       	breq	.+4      	; 0xca <i2c_start_wait+0x2a>
  c6:	90 31       	cpi	r25, 0x10	; 16
  c8:	b1 f7       	brne	.-20     	; 0xb6 <i2c_start_wait+0x16>
  ca:	88 83       	st	Y, r24
  cc:	30 83       	st	Z, r19
  ce:	90 81       	ld	r25, Z
  d0:	99 23       	and	r25, r25
  d2:	ec f7       	brge	.-6      	; 0xce <i2c_start_wait+0x2e>
  d4:	9c 91       	ld	r25, X
  d6:	98 7f       	andi	r25, 0xF8	; 248
  d8:	90 32       	cpi	r25, 0x20	; 32
  da:	11 f0       	breq	.+4      	; 0xe0 <i2c_start_wait+0x40>
  dc:	98 35       	cpi	r25, 0x58	; 88
  de:	29 f4       	brne	.+10     	; 0xea <i2c_start_wait+0x4a>
  e0:	40 83       	st	Z, r20
  e2:	90 81       	ld	r25, Z
  e4:	94 fd       	sbrc	r25, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <i2c_start_wait+0x42>
  e8:	e6 cf       	rjmp	.-52     	; 0xb6 <i2c_start_wait+0x16>
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <i2c_rep_start>:
  f0:	b0 df       	rcall	.-160    	; 0x52 <i2c_start>
  f2:	08 95       	ret

000000f4 <i2c_stop>:
  f4:	84 e9       	ldi	r24, 0x94	; 148
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	84 fd       	sbrc	r24, 4
 102:	fd cf       	rjmp	.-6      	; 0xfe <i2c_stop+0xa>
 104:	08 95       	ret

00000106 <i2c_write>:
 106:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	ec f7       	brge	.-6      	; 0x114 <i2c_write+0xe>
 11a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 11e:	98 7f       	andi	r25, 0xF8	; 248
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	98 32       	cpi	r25, 0x28	; 40
 124:	09 f4       	brne	.+2      	; 0x128 <i2c_write+0x22>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 12a:	84 e8       	ldi	r24, 0x84	; 132
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	while(!(TWCR & (1<<TWINT)));
 130:	ec eb       	ldi	r30, 0xBC	; 188
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	ec f7       	brge	.-6      	; 0x134 <i2c_readNak+0xa>
	
    return TWDR;
 13a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__EEPROM_REGION_LENGTH__+0x7f00bb>

}/* i2c_readNak */
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
	unsigned char ret;

	DDRC  = 0x0C;                              // LEDs Rojos
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x0C;                              // (active low LED's )
 144:	88 b9       	out	0x08, r24	; 8

	DDRD  = 0x90;                              // LEDs Verdes
 146:	80 e9       	ldi	r24, 0x90	; 144
 148:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x90;                              // (active low LED's )
 14a:	8b b9       	out	0x0b, r24	; 11

	i2c_init();                                // init I2C interface
 14c:	7c df       	rcall	.-264    	; 0x46 <i2c_init>
	ret = i2c_start(DevADXL345+I2C_WRITE);       // set device address and write mode
 14e:	86 ea       	ldi	r24, 0xA6	; 166
 150:	80 df       	rcall	.-256    	; 0x52 <i2c_start>
	if ( ret ) {
 152:	88 23       	and	r24, r24
 154:	19 f0       	breq	.+6      	; 0x15c <main+0x1c>
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
 156:	ce df       	rcall	.-100    	; 0xf4 <i2c_stop>
		PORTD = 0x00;                            // Prende LEDs Verdes en caso de ERROR
 158:	1b b8       	out	0x0b, r1	; 11
 15a:	8a c0       	rjmp	.+276    	; 0x270 <main+0x130>
		}else {
		/* issuing start condition ok, device accessible */
		i2c_write(0x00);                       // Direccion del registro a leer DEVID
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	d3 df       	rcall	.-90     	; 0x106 <i2c_write>
		i2c_rep_start(DevADXL345+I2C_READ);       // set device address and read mode
 160:	87 ea       	ldi	r24, 0xA7	; 167
 162:	c6 df       	rcall	.-116    	; 0xf0 <i2c_rep_start>
		ret = i2c_readNak();                    // read one byte
 164:	e2 df       	rcall	.-60     	; 0x12a <i2c_readNak>
		i2c_stop();
 166:	c6 df       	rcall	.-116    	; 0xf4 <i2c_stop>
		
		//; Se comienza la secuencia de seteo del acelerometro en los valores necesarios
		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 168:	86 ea       	ldi	r24, 0xA6	; 166
 16a:	9a df       	rcall	.-204    	; 0xa0 <i2c_start_wait>
		i2c_write(0x25);                        // ;Dato a transmitir ;THRESH_INACT  8 bit unsigned. No dejar en 0x00 umbral de inactividad (62.5 mg/LSB)
 16c:	85 e2       	ldi	r24, 0x25	; 37
 16e:	cb df       	rcall	.-106    	; 0x106 <i2c_write>
		i2c_write(0x11);
 170:	81 e1       	ldi	r24, 0x11	; 17
 172:	c9 df       	rcall	.-110    	; 0x106 <i2c_write>
		i2c_stop();
 174:	bf df       	rcall	.-130    	; 0xf4 <i2c_stop>
		
		i2c_start_wait(DevADXL345+I2C_WRITE);
 176:	86 ea       	ldi	r24, 0xA6	; 166
 178:	93 df       	rcall	.-218    	; 0xa0 <i2c_start_wait>
		i2c_write(0x25);
 17a:	85 e2       	ldi	r24, 0x25	; 37
 17c:	c4 df       	rcall	.-120    	; 0x106 <i2c_write>
		i2c_rep_start(DevADXL345+I2C_READ);
 17e:	87 ea       	ldi	r24, 0xA7	; 167
 180:	b7 df       	rcall	.-146    	; 0xf0 <i2c_rep_start>
		ret = i2c_readNak();
 182:	d3 df       	rcall	.-90     	; 0x12a <i2c_readNak>
 184:	c8 2f       	mov	r28, r24
		i2c_stop();
 186:	b6 df       	rcall	.-148    	; 0xf4 <i2c_stop>
		
		if(ret == 0x11)
 188:	c1 31       	cpi	r28, 0x11	; 17
 18a:	19 f4       	brne	.+6      	; 0x192 <main+0x52>
			PORTC &= 0x04;                       // Prende 1 LED Rojo en caso de Lectura correcta
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	84 70       	andi	r24, 0x04	; 4
 190:	88 b9       	out	0x08, r24	; 8
		//
		
		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 192:	86 ea       	ldi	r24, 0xA6	; 166
 194:	85 df       	rcall	.-246    	; 0xa0 <i2c_start_wait>
		i2c_write(0x26);                        // ;Dato a transmitir ;TIME_INACT  (maximo 255 segundos) (1 sec/LSB)
 196:	86 e2       	ldi	r24, 0x26	; 38
 198:	b6 df       	rcall	.-148    	; 0x106 <i2c_write>
		i2c_write(0x01);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	b4 df       	rcall	.-152    	; 0x106 <i2c_write>
		i2c_stop();
 19e:	aa df       	rcall	.-172    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 1a0:	86 ea       	ldi	r24, 0xA6	; 166
 1a2:	7e df       	rcall	.-260    	; 0xa0 <i2c_start_wait>
		i2c_write(0x27);                        // ;Dato a transmitir ;ACT_INACT_CTL ;en 0b00001111 (D3 en 1=ac coupled)(D2D1D0 = 111 enable en los tres ejes)
 1a4:	87 e2       	ldi	r24, 0x27	; 39
 1a6:	af df       	rcall	.-162    	; 0x106 <i2c_write>
		i2c_write(0x0F);
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	ad df       	rcall	.-166    	; 0x106 <i2c_write>
		i2c_stop();
 1ac:	a3 df       	rcall	.-186    	; 0xf4 <i2c_stop>
		//
		
		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 1ae:	86 ea       	ldi	r24, 0xA6	; 166
 1b0:	77 df       	rcall	.-274    	; 0xa0 <i2c_start_wait>
		i2c_write(0x2C);                        //BW_RATE;(D4=0 sin Low Power)(Rate D3D2D1D0 = 0110 : BW=3.13Hz)
 1b2:	8c e2       	ldi	r24, 0x2C	; 44
 1b4:	a8 df       	rcall	.-176    	; 0x106 <i2c_write>
		i2c_write(0x06);
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	a6 df       	rcall	.-180    	; 0x106 <i2c_write>
		i2c_stop();
 1ba:	9c df       	rcall	.-200    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 1bc:	86 ea       	ldi	r24, 0xA6	; 166
 1be:	70 df       	rcall	.-288    	; 0xa0 <i2c_start_wait>
		i2c_write(0x2F);                        //;INT_MAP	;solo la inactividad conectada al pin INT1, el resto conectadas al pin INT2
 1c0:	8f e2       	ldi	r24, 0x2F	; 47
 1c2:	a1 df       	rcall	.-190    	; 0x106 <i2c_write>
		i2c_write(0xF7);
 1c4:	87 ef       	ldi	r24, 0xF7	; 247
 1c6:	9f df       	rcall	.-194    	; 0x106 <i2c_write>
		i2c_stop();
 1c8:	95 df       	rcall	.-214    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 1ca:	86 ea       	ldi	r24, 0xA6	; 166
 1cc:	69 df       	rcall	.-302    	; 0xa0 <i2c_start_wait>
		i2c_write(0x2E);                        //;INT_ENABLE		;se habilita solo la interrupcion por inactividad
 1ce:	8e e2       	ldi	r24, 0x2E	; 46
 1d0:	9a df       	rcall	.-204    	; 0x106 <i2c_write>
		i2c_write(0x08);
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	98 df       	rcall	.-208    	; 0x106 <i2c_write>
		i2c_stop();
 1d6:	8e df       	rcall	.-228    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevADXL345+I2C_WRITE);
 1d8:	86 ea       	ldi	r24, 0xA6	; 166
 1da:	62 df       	rcall	.-316    	; 0xa0 <i2c_start_wait>
		i2c_write(0x2D);                        //;POWER_CTL MEASURE ON
 1dc:	8d e2       	ldi	r24, 0x2D	; 45
 1de:	93 df       	rcall	.-218    	; 0x106 <i2c_write>
		i2c_write(0x08);						//	;se pone en 1 el bit de Measure, por defecto se prende en modo standby, no queda claro si es necesario
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	91 df       	rcall	.-222    	; 0x106 <i2c_write>
		i2c_stop();								//	;ponerlo en modo medicion para que anden las interrupciones
 1e4:	87 df       	rcall	.-242    	; 0xf4 <i2c_stop>
		//; Fin de la secuencia de seteo del acelerometro en los valores necesarios

		//; Se comienza la secuencia de seteo del rtc en los valores necesarios

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 1e6:	80 ed       	ldi	r24, 0xD0	; 208
 1e8:	5b df       	rcall	.-330    	; 0xa0 <i2c_start_wait>
		i2c_write(0x0E);                        // ;CONFIGURACION REGISTRO DE CONTROL
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	8c df       	rcall	.-232    	; 0x106 <i2c_write>
		i2c_write(0x00);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	8a df       	rcall	.-236    	; 0x106 <i2c_write>
		i2c_stop();
 1f2:	80 df       	rcall	.-256    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 1f4:	80 ed       	ldi	r24, 0xD0	; 208
 1f6:	54 df       	rcall	.-344    	; 0xa0 <i2c_start_wait>
		i2c_write(0x00);                        // ;CONFIGURACION SEGUNDOS
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	85 df       	rcall	.-246    	; 0x106 <i2c_write>
		i2c_write(0x00);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	83 df       	rcall	.-250    	; 0x106 <i2c_write>
		i2c_stop();
 200:	79 df       	rcall	.-270    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 202:	80 ed       	ldi	r24, 0xD0	; 208
 204:	4d df       	rcall	.-358    	; 0xa0 <i2c_start_wait>
		i2c_write(0x01);                        // ;CONFIGURACION MINUTOS
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	7e df       	rcall	.-260    	; 0x106 <i2c_write>
		i2c_write(0x00);						// ;0minutos
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	7c df       	rcall	.-264    	; 0x106 <i2c_write>
		i2c_stop();
 20e:	72 df       	rcall	.-284    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 210:	80 ed       	ldi	r24, 0xD0	; 208
 212:	46 df       	rcall	.-372    	; 0xa0 <i2c_start_wait>
		i2c_write(0x02);                        // ;CONFIGURACION HORA
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	77 df       	rcall	.-274    	; 0x106 <i2c_write>
		i2c_write(0x19);						// ;19 horas
 218:	89 e1       	ldi	r24, 0x19	; 25
 21a:	75 df       	rcall	.-278    	; 0x106 <i2c_write>
		i2c_stop();
 21c:	6b df       	rcall	.-298    	; 0xf4 <i2c_stop>
		//
		
		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 21e:	80 ed       	ldi	r24, 0xD0	; 208
 220:	3f df       	rcall	.-386    	; 0xa0 <i2c_start_wait>
		i2c_write(0x03);                        // ;CONFIGURACION DIA DE LA SEMANA
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	70 df       	rcall	.-288    	; 0x106 <i2c_write>
		i2c_write(0x05);						// ;dia 5 de la semana, viernes
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	6e df       	rcall	.-292    	; 0x106 <i2c_write>
		i2c_stop();
 22a:	64 df       	rcall	.-312    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 22c:	80 ed       	ldi	r24, 0xD0	; 208
 22e:	38 df       	rcall	.-400    	; 0xa0 <i2c_start_wait>
		i2c_write(0x04);                        // ;CONFIGURACION DIA DEL MES
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	69 df       	rcall	.-302    	; 0x106 <i2c_write>
		i2c_write(0x18);						// ;dia 18 del mes
 234:	88 e1       	ldi	r24, 0x18	; 24
 236:	67 df       	rcall	.-306    	; 0x106 <i2c_write>
		i2c_stop();
 238:	5d df       	rcall	.-326    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 23a:	80 ed       	ldi	r24, 0xD0	; 208
 23c:	31 df       	rcall	.-414    	; 0xa0 <i2c_start_wait>
		i2c_write(0x05);                        // ;CONFIGURACION MES
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	62 df       	rcall	.-316    	; 0x106 <i2c_write>
		i2c_write(0x11);						// ;mes noviembre
 242:	81 e1       	ldi	r24, 0x11	; 17
 244:	60 df       	rcall	.-320    	; 0x106 <i2c_write>
		i2c_stop();
 246:	56 df       	rcall	.-340    	; 0xf4 <i2c_stop>
		//

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 248:	80 ed       	ldi	r24, 0xD0	; 208
 24a:	2a df       	rcall	.-428    	; 0xa0 <i2c_start_wait>
		i2c_write(0x05);                        // ;CONFIGURACION AÑO
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	5b df       	rcall	.-330    	; 0x106 <i2c_write>
		i2c_write(0x16);						// ;año 16
 250:	86 e1       	ldi	r24, 0x16	; 22
 252:	59 df       	rcall	.-334    	; 0x106 <i2c_write>
		i2c_stop();
 254:	4f df       	rcall	.-354    	; 0xf4 <i2c_stop>
		//

		//; Fin de la secuencia de seteo del rtc en los valores necesarios

		//
		i2c_start_wait(DevDS3231+I2C_WRITE);
 256:	80 ed       	ldi	r24, 0xD0	; 208
 258:	23 df       	rcall	.-442    	; 0xa0 <i2c_start_wait>
		i2c_write(0x05);
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	54 df       	rcall	.-344    	; 0x106 <i2c_write>
		i2c_rep_start(DevDS3231+I2C_READ);
 25e:	81 ed       	ldi	r24, 0xD1	; 209
 260:	47 df       	rcall	.-370    	; 0xf0 <i2c_rep_start>
		ret = i2c_readNak();
 262:	63 df       	rcall	.-314    	; 0x12a <i2c_readNak>
 264:	c8 2f       	mov	r28, r24
		i2c_stop();
 266:	46 df       	rcall	.-372    	; 0xf4 <i2c_stop>
		
		if(ret == 0x16)
 268:	c6 31       	cpi	r28, 0x16	; 22
 26a:	11 f4       	brne	.+4      	; 0x270 <main+0x130>
			PORTC &= 0x00;                 // Prende el otro LED Rojo en caso de Lectura correcta
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	18 b8       	out	0x08, r1	; 8
		//
		
	}
	
	for(;;);
 270:	ff cf       	rjmp	.-2      	; 0x270 <main+0x130>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
